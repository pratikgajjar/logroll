- Design from first principles
- Follow SOLID principles
- Divide into modular components to manage complexity
- Create small Rust modules to avoid reaching output context limits
- Optimize for blazing fast performance
- Build resilience to failures
- Handle graceful shutdowns
- Frequently verify compilation with `cargo check`
- Structure code to enable graceful error handling
- Use latest stable Rust and Cargo
- Use Tokio for async runtime
- Use postgres_replication for replication logic
- Configure pgoutput as the replication plugin
- Instrument code with comprehensive metrics
- Implement structured logging throughout
- Use logfmt format for logging (key=value pairs)
- Include appropriate log levels for different scenarios
- Compile frequently to catch errors early
- Maintain modular structure as project complexity increases
- Make intentional architectural decisions
- Do not update README.md unless explicitly requested
