INSERT INTO postgres_data_types (
    type_name,
    smallint_val,
    integer_val,
    bigint_val,
    decimal_val,
    numeric_val,
    real_val,
    double_precision_val,
    money_val,
    char_val,
    varchar_val,
    text_val,
    bytea_val,
    timestamp_val,
    timestamptz_val,
    date_val,
    time_val,
    timetz_val,
    interval_val,
    boolean_val,
    enum_mood_val,
    point_val,
    line_val,
    lseg_val,
    box_val,
    path_val,
    polygon_val,
    circle_val,
    cidr_val,
    inet_val,
    macaddr_val,
    macaddr8_val,
    bit_val,
    varbit_val,
    tsvector_val,
    tsquery_val,
    uuid_val,
    xml_val,
    json_val,
    jsonb_val,
    jsonpath_val,
    integer_array_val,
    text_array_val,
    multidim_array_val,
    composite_val,
    int4range_val,
    int8range_val,
    numrange_val,
    tsrange_val,
    tstzrange_val,
    daterange_val,
    int4multirange_val,
    int8multirange_val,
    nummultirange_val,
    tsmultirange_val,
    tstzmultirange_val,
    datemultirange_val,
    domain_val,
    oid_val,
    regclass_val,
    regproc_val,
    regprocedure_val,
    regoper_val,
    regoperator_val,
    regtype_val,
    regrole_val,
    regnamespace_val,
    regconfig_val,
    regdictionary_val,
    pg_lsn_val,
    xid8_val
)
SELECT
    'Type ' || i,
    i,
    i,
    i * 1000000,
    i + 0.12,
    i + 0.12,
    i + 0.1234,
    i + 0.12345678,
    i::money,
    LPAD(i::text, 10, '0'),
    'varchar ' || i,
    'text ' || i,
    decode(LPAD(to_hex(i), 8, '0'), 'hex'),
    current_date + i * interval '1 day',
    (current_timestamp + i * interval '1 day'),
    current_date + i * interval '1 day',
    current_time + i * interval '1 minute',
    (current_time + i * interval '1 minute') AT TIME ZONE 'UTC',
    i * interval '1 day',
    i % 2 = 0,
    CASE i % 3 WHEN 0 THEN 'happy' WHEN 1 THEN 'sad' ELSE 'neutral' END::mood_enum,
    point(i, i),
    line(point(i, i), point(i+1, i+1)),
    lseg(point(i, i), point(i+1, i+1)),
    box(point(i, i), point(i+1, i+1)),
    path('((' || i || ',' || i || '),(' || (i+1) || ',' || (i+1) || '))'),
    polygon(('((' || i || ',' || i || '),(' || (i+1) || ',' || i || '),(' || i || ',' || (i+1) || '))')::path),
    circle(point(i, i), i),
    ('10.0.' || (i/256) || '.' || (i%256) || '/24')::cidr,
    ('10.0.0.' || i)::inet,
    macaddr '08:00:2b:01:02:03',
    macaddr8 '08:00:2b:01:02:03:04:05',
    (i % 256)::bit(8),
    (i % 128)::varbit,
    to_tsvector('simple', 'text ' || i),
    to_tsquery('simple', 'text_' || i),
    md5(i::text)::uuid,
    xmlparse(content '<value>' || i || '</value>'),
    json_build_object('id', i, 'name', 'Item ' || i),
    jsonb_build_object('id', i, 'name', 'Item ' || i),
    ('$."Item ' || i || '"')::jsonpath,
    ARRAY[i, i+1, i+2],
    ARRAY['text' || i, 'text' || (i+1)],
    ARRAY[[i, i+1], [i+2, i+3]],
    ROW(i, 'text' || i)::complex_type,
    int4range(i, i+10),
    int8range(i*1000, (i+10)*1000),
    numrange(i::numeric, (i+5.5)::numeric),
    tsrange(current_timestamp + i * interval '1 day', current_timestamp + (i+5) * interval '1 day'),
    tstzrange(current_timestamp + i * interval '1 day', current_timestamp + (i+5) * interval '1 day'),
    daterange(current_date + i * interval '1 day', current_date + (i+5) * interval '1 day'),
    int4multirange(int4range(i, i+5)),
    int8multirange(int8range(i*1000, (i+5)*1000)),
    nummultirange(numrange(i::numeric, (i+5.5)::numeric)),
    tsmultirange(tsrange(current_timestamp + i * interval '1 day', current_timestamp + (i+5) * interval '1 day')),
    tstzmultirange(tstzrange(current_timestamp + i * interval '1 day', current_timestamp + (i+5) * interval '1 day')),
    datemultirange(daterange(current_date + i * interval '1 day', current_date + (i+5) * interval '1 day')),
    i,
    i,
    'postgres_data_types'::regclass,
    'now'::regproc,
    'now()'::regprocedure,
    '+'::regoper,
    '+ (integer, integer)'::regoperator,
    'integer'::regtype,
    current_user::regrole,
    'public'::regnamespace,
    'english'::regconfig,
    'simple'::regdictionary,
    ('0/' || LPAD(to_hex(i), 8, '0'))::pg_lsn,
    ('0/' || LPAD(to_hex(i), 8, '0'))::xid8
FROM generate_series(1, 100) AS i;